# 222222222
# Регулярные выражения-это регулярное выражение — это последовательность символов,
# используемая для поиска и замены текста в строке или файле


# []	Содержит символы для поиска вхождений	[a-m]
# \	Сигнализирует о специальном символе (также может использоваться для экранирования специальных символов)	\d
# .	Любой символ, кроме новой строки (\n)	“he…o”
# ^	Строка начинается с	“^hello”
# $	Строка заканчивается	“world$”
# *	0 и более вхождений	“aix*”
# +	1 и более вхождений	“aix+”
# {}	Указанное количество вхождений	“al{2}”
# |	Или	“falls|stays”
# ()	Группирует шаблон


# \A	Ищет символы в начале строки	“\AThe”
# \b	Ищет символы в начале или конец слова, в зависимости от расположения	r»\bain» r»ain\b»
# \B	Ищет символы которые находятся НЕ в начале или конце строки	r»\Bain» r»ain\B»
# \d	Ищет совпадения с числами 0-9	“\d”
# \D	Ищет совпадение, где строка не содержит числа	“\D”
# \s	Ищет совпадение с символом пробела	“\s”
# \S	Ищет совпадение, где строка НЕ содержит пробел	“\S”
# \w	Ищет совпадение, где строка содержит буквы, цифры или символ по подчеркивания (_)	“\w”
# \W	Ищет совпадение, где строка НЕ содержит буквы, цифры или символ по подчеркивания (_)	“\W”
# \Z	Ищет символы в конце строки


# Комбинации	Значение
# [arn]	Возвращает совпадение, в котором присутствует один из указанных символов (a, r или n)
# [a-n]	Возвращает совпадение для с символом нижнего регистра в алфавитном порядке между a и n, включая их
# [^arn]	Возвращает совпадение для любого символа, КРОМЕ а, r и n
# [0123]	Возвращает совпадение, в котором присутствует любая из указанных цифр (0, 1, 2 или 3)
# [0-9]	Возвращает совпадение с любой цифрой от 0 до 9
# [0-5][0-9]	Возвращает совпадение с любыми двузначными числами от 0 до 59
# [a-zA-Z]	Возвращает совпадение с любым символом английского алфавита между a и z, включая строчные буквы и прописные
# [а-яА-ЯёЁ]	Возвращает совпадение с любым символом русского алфавита между а и я, включая строчные буквы и прописные
# [+]	В комбинациях символы +, *, ., |, (), $,{} не имеют особенного значения, поэтому [+]: будет искать любой + в строке


# \A	Ищет символы в начале строки	“\AThe”
# \b	Ищет символы в начале или конец слова, в зависимости от расположения	r»\bain» r»ain\b»
# \B	Ищет символы которые находятся НЕ в начале или конце строки	r»\Bain» r»ain\B»
# \d	Ищет совпадения с числами 0-9	“\d”
# \D	Ищет совпадение, где строка не содержит числа	“\D”
# \s	Ищет совпадение с символом пробела	“\s”
# \S	Ищет совпадение, где строка НЕ содержит пробел	“\S”
# \w	Ищет совпадение, где строка содержит буквы, цифры или символ по подчеркивания (_)	“\w”
# \W	Ищет совпадение, где строка НЕ содержит буквы, цифры или символ по подчеркивания (_)	“\W”
# \Z	Ищет символы в конце строки	“Spain\Z”


# [arn]	Возвращает совпадение, в котором присутствует один из указанных символов (a, r или n)
# [a-n]	Возвращает совпадение для с символом нижнего регистра в алфавитном порядке между a и n, включая их
# [^arn]	Возвращает совпадение для любого символа, КРОМЕ а, r и n
# [0123]	Возвращает совпадение, в котором присутствует любая из указанных цифр (0, 1, 2 или 3)
# [0-9]	Возвращает совпадение с любой цифрой от 0 до 9
# [0-5][0-9]	Возвращает совпадение с любыми двузначными числами от 0 до 59
# [a-zA-Z]	Возвращает совпадение с любым символом английского алфавита между a и z, включая строчные буквы и прописные
# [а-яА-ЯёЁ]	Возвращает совпадение с любым символом русского алфавита между а и я, включая строчные буквы и прописные
# [+]	В комбинациях символы +, *, ., |, (), $,{} не имеют особенного значения, поэтому [+]: будет искать любой + в строке


# Мета-символ	Смысл
# .	Любой отдельный персонаж
# [ ], [^ ]	Любой отдельный символ в наборе (символов) или нет ( ^ ) в наборе (порядок не имеет значения)
# ?	Квантор: необязательный, т. Е. Ноль или одно из предшествующих регулярных выражений
# *	Quantifier: ноль или более предыдущего регулярного выражения
# +	Квантификатор: одно или несколько из предыдущего регулярного выражения
# |	Или же
# ^	Привязать шаблон к началу строки
# $	Шаблон привязки к концу строки
# ( )	Группа персонажей
# { }	Quantifier: количество времени предыдущего регулярного выражения.
# {n} означает ровно n раз
# {n, m} или {nm} означает n и m раз (включительно)
# {n,} или {,m} означает не менее n или не более m раз
# \	Избегает метасимвола, то есть это означает, что следующий за ним символ не является метасимволом.

# Часто используемые методы
# re.match() метод ищет по заданному шаблону в начале строки
# re.search() метод похож на match(), но он ищет не только в начале строки
# re.findall() метод возвращает список всех найденных совпадений. У метода findall()
# нет ограничений на поиск в начале или конце строки
# re.split() метод разделяет строку по заданному шаблону.
# re.sub()метод ищет шаблон в строке и заменяет его на указанную подстроку
# re.compile()можем собрать регулярное выражение в отдельный объект, который может быть использован для поиска



# re.match() метод ищет по заданному шаблону в начале строки
# Пример 1
# import re
# template = r'abc'
# word = 'abcd'
# result = re.match(template, word)
# print(result)

# Пример 2
# import re
# template = r'hello'
# word = 'world hello'
# result = re.match(template, word)
# print(result)


# Пример 3
# import re
# template = r'wor[a-z]d'
# word = 'world'
# result = re.match(template, word)
# print(result)


# Пример 4
# import re
# template = r'\d\d\d\d'
# number = '123454'
# result = re.match(template, number)
# print(result)


# Пример 5
# import re
# template = r'he[a-z]*o'
# word = 'hello'
# result = re.match(template, word)
# print(result)






# re.search() метод похож на match(), но он ищет не только в начале строки
# Пример 1
# import re
# template = r'hello'
# word = 'world hello'
# result = re.search(template, word)
# print(result)

# Пример 2
# import re
# template = r'\A[a-z]*'#Ищет символы в начале строки
# word = 'afb abcdefghi'
# result = re.search(template, word)
# print(result)

# Пример 3
# import re
# template = r'\b[a-z]*'#Ищет символы в начале или конец слова, в зависимости от расположения
# word = 'afb abcdefghi kltf'
# result = re.search(template, word)
# print(result)



# Пример 4
# import re
# template = r'\s[a-z]*'
# word = 'afb abcdefghi kltf'
# result = re.search(template, word)
# print(result)


# Пример 2
# import re
# template = r'[\D]*' #Ищет совпадение, где строка не содержит числа
# word = 'abcdefghi784'
# result = re.search(template, word)
# print(result)





# re.findall() метод возвращает список всех найденных совпадений. У метода findall()
# нет ограничений на поиск в начале или конце строки
# Пример 1
# import re
# template = r'.'
# word = ',./abcdefghi'
# result = re.findall(template, word)
# print(result)


# Пример 2
# import re
# template = r'\w'#Ищет совпадение, где строка содержит буквы, цифры или символ по подчеркивания (_)
# word = ',./abcdefghi'
# result = re.findall(template, word)
# print(''.join(result)



# Пример 3
# import re
# template = r'[\W]'Ищет совпадение, где строка не содержит буквы, цифры или символ по подчеркивания (_)
# word = ',./abcdefghi'
# result = re.findall(template, word)
# print(''.join(result))


# Пример 3
# import re
# template = r'[a-z]*\Z'#\Z	Ищет символы в конце строки	“Spain\Z”
# word = ',./abcdef ghi'
# result = re.findall(template, word)
# print(result)


# re.sub()метод ищет шаблон в строке и заменяет его на указанную подстроку
# import re
# template = r'yes'
# word = 'no no no'
# result = re.sub('no',template,word)
# print(result)


# re.split() метод разделяет строку по заданному шаблону.
# import re
# template = r'i'
# word = 'hihello'
# print(re.split(template, word))


# Пример 1
# import re
# template = r'two | five'
# word = 'one three five'
# print(re.search(template, word))


# Пример 2
# import re
# template = r'(two) | (five)'
# word = 'one three five'
# print(re.search(template, word))

# Пример 3
# import re
# template = r'(\w*)-\1'
# word = 'abc-abc'
# print(re.search(template, word))