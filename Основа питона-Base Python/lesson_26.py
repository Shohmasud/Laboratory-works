# 26262626
# ООП объектно ориентированная программирования

# объявление класса
# class Cars:
#     def __init__(self, type, name, color, speed):#инициализация атрибутов класса
#         self.type = type
#         self.name = name
#         self.color = color
#         self.speed = speed
#         self.sencor = False
#         # print(self.name)
#
#     # объявление методов класса
#     def traffic(self):
#         second = int(input('Напишите время движения автомобиля в секундах:'))
#         kilometer = 0
#         km_second = self.speed / 3600
#         for n in range(second):
#             kilometer += km_second
#
#         print(f'В течении секунд {second}, ваша машина преодолело {kilometer} км')
#
#     def characteristic(self):
#         print(self.type, self.name, self.color, self.speed, sep='\n')
#         self.traffic() # методы можно вызвать внутри методов
#
# print(Cars('Спортивная машина', 'Модель-BMW M5', 'чёрный', 340))
# car = Cars('Спортивная машина', 'Модель-BMW M5', 'чёрный', 340)#создания экземпляра класса


# вызов атрибутов класса
# print(car.type)
# print(car.name)
# print(car.speed)

#вызов метода класса
# car.characteristic()
# car.traffic()

# встроеные атрибуты класса
# print(dir(car))
# print(car.__dict__)


# 1)Объявление класса
# 2)Инициализация атрибутов класса
# 3)Обявление методов класса-(методы можно вызвать внутри методов)
# 4)Создание экземпляра класса
# 5)Вызов атрибутов экземпляра класса
# 6)Вызов метод экземпляра



# Встроеные атрибуты класса:

# '__class__',
#  '__delattr__',
#  '__dict__',
#  '__dir__',
#  '__doc__',
#  '__eq__',
#  '__format__',
#  '__ge__',
#  '__getattribute__',
#  '__gt__',
#  '__hash__',
#  '__init__',
#  '__init_subclass__',
#  '__le__',
#  '__lt__',
#  '__module__',
#  '__ne__',
#  '__new__',
#  '__reduce__',
#  '__reduce_ex__',
#  '__repr__',
#  '__setattr__',
#  '__sizeof__',
#  '__str__',
#  '__subclasshook__',
#  '__weakref__',
#  'make',
#  'model',
#  'name',
#  'start',
#  'stop


# Что входит в ООП:
# Инкапсуляция- скрытие приватных элементов класса от других объектов.
#
# Наследование- использование методов и атрибутов одного класса(родительского класса) в другом созданном
# классе(дочернем классе)
#
# Полиморфизм - разное поведение одного и того же метода в разных классах.Дочерние классы могут их переопределять
# и решать одну и ту же задачу разными путями,а конкретная реализация будет выбрана только во время исполнения
# программы
